{"componentChunkName":"component---src-templates-post-jsx","path":"/reactivity-in-python/","result":{"data":{"markdownRemark":{"html":"<p>JavaScript의 Vue, React 등에서 쓰이는 Reactivity 개념을 간단하게 구현해보는 <a href=\"https://medium.com/vue-mastery/the-best-explanation-of-javascript-reactivity-fea6112dd80d\">The Best Explanation of JavaScript Reactivity 🎆</a>라는 게시글을 보고 파이썬으로 따라 구현해봤다.</p>\n<figure>\n  <a href=\"https://cdn-images-1.medium.com/max/800/1*t8enMn6h0gjY6HNKoSVC1g.jpeg\">\n    <img src=\"https://cdn-images-1.medium.com/max/800/1*t8enMn6h0gjY6HNKoSVC1g.jpeg\" alt=\"Vue updates\">\n  </a>\n</figure>\n<h2>JavaScript</h2>\n<p>아래 코드사진은 원문에서 가져왔다. <code>target</code> 전역변수를 사용하고 <code>Object.defineProerty</code>로 등록된 <code>Dep</code>과 <code>watcher</code> 함수를 이용해 값 변동을 추적하고 등록된 함수를 실행한다.</p>\n<figure>\n  <a href=\"https://cdn-images-1.medium.com/max/800/1*bM-LGqWYYU3lCaazJ7cAew.png\">\n    <img src=\"https://cdn-images-1.medium.com/max/800/1*bM-LGqWYYU3lCaazJ7cAew.png\" alt=\"JavaScript code\">\n  </a>\n</figure>\n<h2>Python</h2>\n<p>JavaScript 코드에 가깝게 파이썬 코드를 작성했다. 다만 <code>Object.defineProperty</code>에 대응되는 기능을 구현하기 위해 임의로 <code>Data</code> 클래스에 <code>__setattr__</code>, <code>__getattribute__</code>를 구현하다보니 코드가 장황해졌다. data를 dict로 만들고 <code>__getitem__</code>, <code>__setitem__</code>을 오버라이딩 하는 방법도 고려했으나 <code>data['price']</code>가 아닌 <code>data.price</code> 문법을 유지하고 싶어 클래스로 선언했다.</p>\n<p>원문 코드에선 data의 프로퍼티를 순회하면서 <code>dep</code>을 만들어 주었는데 파이썬 코드에선 이를위해 <code>deps</code> 변수를 활용했다.</p>\n<pre><code class=\"language-python\"># main.py\nclass Dep:\n    def __init__(self):\n        self.subscribers = []\n\n    def depend(self):\n        if target and target not in self.subscribers:\n            self.subscribers.append(target)\n\n    def notify(self):\n        for sub in self.subscribers:\n            sub()\n\n\nclass Data:\n    def __init__(self, *args, **kwargs):\n        for name in kwargs:\n            setattr(self, name, kwargs[name])\n\n    def __setattr__(self, name, value):\n        if name not in deps:\n            deps[name] = Dep()\n        result = super().__setattr__(name, value)\n        deps[name].notify()\n        return result\n\n    def __getattribute__(self, name):\n        deps[name].depend()\n        value = super().__getattribute__(name)\n        return value\n\n\ndeps = {}\ndata = Data(price=5, quantity=2)\ntarget = None\n\n\ndef watcher(func):\n    global target\n    target = func\n    target()\n    target = None\n\n\ndef total_func():\n    data.total = data.price * data.quantity\n\n\ndef sale_price_func():\n    data.sale_price = data.price * 0.9\n\n\nwatcher(total_func)\nwatcher(sale_price_func)\n\n\ndef print_data():\n    attrs = ('sale_price', 'price', 'quantity', 'total')\n    s = (f'{attr}: {getattr(data, attr)}' for attr in attrs)\n    print(', '.join(s))\n\n\nif __name__ == '__main__':\n    print_data()\n    data.price = 20\n    print_data()\n    data.quantity = 3\n    print_data()\n</code></pre>\n<p>위의 코드를 실행하면 다음과 같은 결과를 확인할 수 있다.</p>\n<pre><code class=\"language-bash\">$ python main.py\nsale_price: 4.5, price: 5, quantity: 2, total: 10\nsale_price: 18.0, price: 20, quantity: 2, total: 40\nsale_price: 18.0, price: 20, quantity: 3, total: 60\n</code></pre>\n<h2>마무리</h2>\n<p>전역 변수를 활용한다는게 썩 마음에 들진 않는다. 파이썬의 Lambda 함수에선 대입문을 사용할 수 없다보니 Arrow function을 사용한 JavaScript 처럼 깔끔한 코드가 나오지도 않았다. 다만 callback 함수를 어떻게 등록하고 어떤 원리를 통해 자동으로 업데이트 되는지 알아보기엔 적당한 코드였다.</p>","frontmatter":{"title":"파이썬으로 Reactivity 따라하기","image":null},"excerpt":"JavaScript의 Vue, React 등에서 쓰이는 Reactivity 개념을 간단하게 구현해보는 The Best Explanation of JavaScript Reactivity 🎆라는 게시글을 보고 파이썬으로 따라 구현해봤다. JavaScri…"}},"pageContext":{"slug":"reactivity-in-python","date":"2018-09-15","lastmod":"2018-09-15"}},"staticQueryHashes":["269600272","3159585216"],"slicesMap":{}}