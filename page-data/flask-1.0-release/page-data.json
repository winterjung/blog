{"componentChunkName":"component---src-templates-post-jsx","path":"/flask-1.0-release/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://flask.pocoo.org/\">flask</a>가 <a href=\"https://github.com/pallets/flask/releases/tag/0.12\">0.12 버전으로 릴리즈</a>된지 1년 5개월만에 드디어 메이저 버전인 <a href=\"https://www.palletsprojects.com/blog/flask-1-0-released/\">1.0 버전이 릴리즈</a> 되었다.</p>\n<p>이 글에서는 1.0 버전이 되면서 인상적인 변경점만 정리해봤다.</p>\n<blockquote>\n<p><a href=\"http://flask.pocoo.org/docs/1.0/changelog/\">Flask version 1.0 full changelog</a> - Released on April 26th 2018</p>\n</blockquote>\n<h2>Highlight change</h2>\n<ul>\n<li>\n<p>Python 2.6과 3.3 지원을 중단했다. <a href=\"https://github.com/pallets/meta/issues/24\">[pallets/meta#24]</a></p>\n</li>\n<li>\n<p><code>JSONIFY_PRETTYPRINT_REGULAR</code> config 값은 <code>jsonify()</code>가 반환하는 응답의 포맷을 결정하는데 이젠 debug 모드가 아닐 때 기본적으로 False로 설정되어 json 응답이 compact하게 출력된다. debug 모드에선 기본적으로 True로 설정된다. <a href=\"https://github.com/pallets/flask/pull/2193\">[#2193]</a></p>\n</li>\n<li>\n<p>Blueprint별로 <code>json_encoder</code>와 <code>json_decoder</code>를 설정할 수 있게되었다. <a href=\"https://github.com/pallets/flask/pull/1898\">[#1898]</a></p>\n</li>\n<li>\n<p><code>FLASK_APP</code> 환경 변수를 설정할 때 인자가 없는 팩토리 함수(e.g. <code>create_app</code>, <code>make_app</code>)를 자동으로 감지한다. <a href=\"https://github.com/pallets/flask/pull/2297\">[#2297]</a></p>\n</li>\n<li>\n<p>인자가 있는 팩토리 함수도 <code>FLASK_APP</code>으로 설정이 가능해졌다. <a href=\"https://github.com/pallets/flask/pull/2326\">[#2326]</a></p>\n</li>\n<li>\n<p>테스트 클라이언트에 새로운 <code>json</code> 키워드 인자가 추가되었다. 테스트에서 <code>app.test_client()</code>로 json request를 보낼 때 일일이 <code>data=json.dumps()</code>, <code>content_type='application/json'</code>으로 설정해야 했으나 이젠 단순히 <code>json={'foo': 'bar'}</code>처럼 해줄 수 있다. <a href=\"https://github.com/pallets/flask/pull/2358\">[#2358]</a></p>\n</li>\n<li>\n<p><code>Request</code>에 있던 json 처리 루틴을 <code>JSONMixin</code>으로 분리하고, <code>Request</code>와 <code>Response</code> 둘 모두에 <code>JSONMixin</code>이 추가되면서 이제 <code>Response</code>에도 <code>is_json()</code>과 <code>get_json()</code>이 추가되어 json 응답을 테스팅하기 더욱 편해졌다. 만약 <code>pytest-flask</code>를 사용하고 있다면 몽키패치로 <code>Response</code> 클래스를 대체해 <code>.json</code> 프로퍼티를 지원하고 있으므로 크게 신경쓰지 않아도 된다. <a href=\"https://github.com/pallets/flask/pull/2358\">[#2358]</a></p>\n</li>\n<li>\n<p>오래된 flask 예제를 보면 <code>flask.ext.foo</code>같은 형태로 확장 플러그인을 불러오는 모습을 볼 수 있었고 그동안 DeprecationWarning을 띄워주고있었지만 버전업을 통해 오래된 부분을 완전히 삭제했다. 앞으로 <code>flask.ext.sqlalchemy</code> 형태를 사용하는 대신 <code>flask_sqlalchemy</code>처럼 사용해아한다. 더불어 몇 가지 deprecated 코드도 같이 삭제되었다. <a href=\"https://github.com/pallets/flask/issues/2385\">[#2385]</a></p>\n</li>\n<li>\n<p>그동안 <code>Request.json</code> 프로퍼티는 DeprecationWarning을 발생시키고 대신 <code>get_json()</code>을 사용하고 있었지만 <a href=\"https://github.com/pallets/flask/issues/1421\">[#1421]</a>에서 논의를 거친 끝에 <code>.form</code>, <code>.data</code>와의 일관성, 기존 코드가 경고말곤 아무런 조치도 취하지 않고 단순히 <code>get_json()</code>을 호출했던 점 등을 이유로 DeprecationWarning이 삭제되었다. <a href=\"https://github.com/pallets/flask/pull/2397\">[#2397]</a></p>\n</li>\n<li>\n<p><code>flask</code> 커맨드, <code>Flask.run()</code>에서 <code>python-dotenv</code>가 설치되어 있다면 <code>.env</code>, <code>.flaskenv</code> 파일을 자동으로 감지해 환경 변수를 읽어들인다. <a href=\"https://github.com/pallets/flask/pull/2416\">[#2416]</a></p>\n</li>\n<li>\n<p>로깅이 간편해졌다. <code>LOGGER_NAME</code>, <code>LOGGER_HANDLER_POLICY</code>가 삭제되었으며 기존의 Error Handling 문서에 있던 logging 파트가 가독성이 향상된 <a href=\"http://flask.pocoo.org/docs/1.0/logging/\">별도의 Logging 문서</a>로 분리되고 정보가 추가되었다. <a href=\"https://github.com/pallets/flask/pull/2436\">[#2436]</a></p>\n</li>\n<li>\n<p>이제 기본적으로 development 환경에서 서버가 멀티스레드로 동작한다. 그에 맞춰 문서에서 <em>by default serves only one request at a time</em> 이라는 <a href=\"https://github.com/pallets/flask/pull/2536\">문구가 삭제</a>되었다. 로컬 머신에서 테스트해 본 결과 동시에 128개의 요청도 처리 가능했지만 어디까지나 개발 환경에서 편의성이 좋아진 것으로 프로덕션 환경에서 <code>app.run()</code>은 추천하지 않는다. <a href=\"https://github.com/pallets/flask/pull/2529\">[#2529]</a></p>\n</li>\n<li>\n<p><a href=\"http://flask.pocoo.org/docs/1.0/tutorial/\">튜토리얼</a>에 있는 예제가 다시 쓰여졌다. flask에서 자주 쓰이는 패턴과 구조를 적용한 예제들로 팩토리 패턴(e.g. <code>create_app()</code>), blueprint, config 파일 사용, pytest와 coverage, <code>Waitress</code>를 사용한 프로덕션 서버 실행 등이 적용됐다. <a href=\"https://github.com/pallets/flask/pull/2676\">[#2676]</a></p>\n</li>\n</ul>\n<h2>사족</h2>\n<p>개인적으로 flask를 애용하고 있었는데 이번 릴리즈를 통해 테스트가 좀 더 간편해지고 튜토리얼이 보강된 점이 특히 마음에 든다. 이 글에서 소개된 변경점 말고도 무척 많은 점이 변경되었는데 앞으로 점점 더 성장하는 flask가 되었으면 좋겠다.</p>","frontmatter":{"title":"Flask 1.0에서 달라진 점","image":null},"excerpt":"flask가 0.12 버전으로 릴리즈된지 1년 5개월만에 드디어 메이저 버전인 1.0 버전이 릴리즈 되었다. 이 글에서는 1.0 버전이 되면서 인상적인 변경점만 정리해봤다. Flask version 1.0 full changelog - Release…"}},"pageContext":{"slug":"flask-1.0-release","date":"2018-04-27","lastmod":"2018-04-27"}},"staticQueryHashes":["269600272","3159585216"],"slicesMap":{}}