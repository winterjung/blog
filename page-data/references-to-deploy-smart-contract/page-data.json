{"componentChunkName":"component---src-templates-post-jsx","path":"/references-to-deploy-smart-contract/","result":{"data":{"markdownRemark":{"html":"<h2>헷갈리는 용어 정리</h2>\n<ul>\n<li><code>Test RPC</code>: Ethereum client for testing and development, <a href=\"https://github.com/pipermerriam/eth-testrpc\">파이썬 구현체</a>도있고 js구현체도 있지만 node.js기반의 <code>ethereumjs/testrpc</code>가 업데이트가 좋음.</li>\n<li><code>Geth</code>: full ethereum node implemented in Go</li>\n<li><code>pyethapp</code>: <code>pyethereum</code>+<code>pydevp2p</code>, complete networked Ethereum client</li>\n<li><code>pyethereum</code>: core blockchain related logic</li>\n<li><code>web3.py</code>, <code>web3.js</code>: The key connection between the Ethereum network and your dapp. Web3 allows you to compile, deploy, and interact with your smart contracts.</li>\n</ul>\n<h3>결론</h3>\n<ul>\n<li><code>ethereumjs-testrpc</code>는 초기 개발에 사용하는 경량급 테스트넷 노드고 <code>Geth</code>는 <code>Ropsten</code>같은 대중적인 testnet과 연결될 수 있고 실제 이더리움 네트워크와도 연결될 수 있는 heavy한 노드. <a href=\"https://karl.tech/intro-guide-to-ethereum-testnets/\">참고</a>, <code>pyethapp</code>도 노드 구현체 중 하나임</li>\n<li><code>web3</code>는 Dapp과 Geth, testrpc같은 노드들을 연결시켜줌. <code>ether-pudding</code>은 <code>web3</code>의 래퍼</li>\n<li><code>web3</code>는 컴파일과 배포를 할 수 있지만 <code>solc</code>는 컴파일만 할 수 있음.</li>\n</ul>\n<h2>배포 흐름</h2>\n<ol>\n<li><code>solidity</code>로 스마트 컨트랙트 작성</li>\n<li><code>web3</code> 혹은 <code>solc</code>를 이용해 바이트코드로 컴파일</li>\n<li>컴파일의 결과물인 바이트코드과 <code>ABI</code>를 얻음</li>\n<li><code>testrpc</code> 실행</li>\n<li><code>web3</code>를 이용해 <code>localhost:port</code>에 있는 <code>testrpc</code>에 바이트코드를 배포. 이 때 <code>ABI</code>가 사용됨</li>\n<li>배포 후 <code>컨트랙트 어드레스</code>를 반환받을 수 있음</li>\n<li><code>web3</code>를 이용해 <code>컨트렉스 어드레스</code>와 <code>ABI</code>를 이용해 컨트랙트를 가져와 함수를 실행시킬 수 있음.</li>\n<li><code>web3.js</code>와 html를 연동시켜 웹 페이지와 블록체인에 있는 스마트 컨트랙트가 서로 통신할 수 있음.</li>\n</ol>\n<pre><code class=\"language-js\">// 컴파일 결과물에서 ABI를 가져옴\nabiDefinition = JSON.parse(compiledCode.contracts[':Voting'].interface)\n// ABI를 통해 골격만 잡힌 컨트랙트 껍데기를 생성함\nVotingContract = web3.eth.contract(abiDefinition)\nbyteCode = compiledCode.contracts[':Voting'].bytecode\n// 껍데기에 바이트코드를 담아 컨트랙트를 배포함.\ndeployedContract = VotingContract.new(['Rama','Nick','Jose'],{data: byteCode, from: web3.eth.accounts[0], gas: 4700000})\n// deployedContract는 컨트랙트 어드레스를 담고 있음\n// 골격만 잡힌 컨트랙트에 .at 을 통해 실제 내용을 채워 컨트랙트를 객체화함\ncontractInstance = VotingContract.at(deployedContract.address)\n</code></pre>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://medium.com/@doart3/ethereum-dapps-without-truffle-compile-deploy-use-it-e6daeefcf919\">Truffle을 사용하지 않고 컴파일, 배포, 사용하기</a></li>\n<li><a href=\"https://medium.com/@gus_tavo_guim/using-truffle-to-create-and-deploy-smart-contracts-95d65df626a2\">Truffle을 이용한 스마트 컨트랙트 만들기</a></li>\n<li><a href=\"https://medium.com/hci-wvu/hello-world-in-solidity-3e7d3e025831\">Truffle을 이용해 간단한 스마트 컨트랙트 배포하고 확인해보기</a></li>\n<li><a href=\"https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2\">Voting app 튜토리얼 1</a></li>\n<li><a href=\"https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-2-30b3d335aa1f\">Voting app 튜토리얼 2</a></li>\n<li><a href=\"http://sancs.tistory.com/163\">TestRPC에 컨트랙트 올리기</a> (위 링크의 튜토리얼의 한국어 버전)</li>\n<li><a href=\"http://sancs.tistory.com/164\">Truffle을 이용해 rinkeby 테스트넷에 배포하기</a></li>\n<li><a href=\"http://www.chaintalk.io/archive/lecture/586\">Node.js 콘솔로 TestRPC에 배포하고 사용하기</a></li>\n<li><a href=\"http://www.chaintalk.io/archive/lecture/501\">컨트랙트와 통신하는 프론트 dApp 예제</a></li>\n</ul>","frontmatter":{"title":"스마트 컨트랙트 개발 준비하기 - 개발 과정","image":null},"excerpt":"헷갈리는 용어 정리 Test RPC: Ethereum client for testing and development, 파이썬 구현체도있고 js구현체도 있지만 node.js기반의 ethereumjs/testrpc가 업데이트가 좋음. Geth: full…"}},"pageContext":{"slug":"references-to-deploy-smart-contract","date":"2017-10-08","lastmod":"2017-10-08"}},"staticQueryHashes":["269600272","3159585216"],"slicesMap":{}}